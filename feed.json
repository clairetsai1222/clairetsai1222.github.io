{
    "version": "https://jsonfeed.org/version/1",
    "title": "Claire",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/07/21/hello-world/",
            "url": "http://example.com/2023/07/21/hello-world/",
            "title": "Hello World",
            "date_published": "2023-07-21T15:44:53.409Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/07/21/Computationnal-complexity/",
            "url": "http://example.com/2023/07/21/Computationnal-complexity/",
            "title": "Computationnal complexity",
            "date_published": "2023-07-21T06:50:47.000Z",
            "content_html": "<h1 id=\"computational-complexity\"><a class=\"markdownIt-Anchor\" href=\"#computational-complexity\">#</a> Computational complexity</h1>\n<p>计算复杂度（Computational complexity）是算法进行运算时用于衡量所使用资源多寡的概念，通常会以大写 O 来表示（O），它通常用于辅助使用者选择更加高效或者使用资源较少的算法以优化程序性能，计算复杂度主要关注两点 —— 空间与时间，它们分别被称为空间复杂度和时间复杂度，计算复杂度标识具体指代哪一种复杂度或者同时意指两者取决于具体讨论的问题。</p>\n<ol>\n<li>空间复杂度指估计算法执行过程中所需要的内存资源或额外的存储空间支持，空间复杂度指标会显示出随着解决的问题规模越大（所用元素和维度越多），则它需要的资源会如何增长；</li>\n<li>时间复杂度指算法运行并解决问题所需要的计算时间，和空间复杂度相同，它表示算法运行时间与问题规模之间的关系，时间复杂度越低，则算法的执行速度将越快。</li>\n</ol>\n",
            "tags": [
                "Robotics;Computational complexity;Motion Planning"
            ]
        },
        {
            "id": "http://example.com/2023/07/20/Computational-Motion-Planning-for-Robotics/",
            "url": "http://example.com/2023/07/20/Computational-Motion-Planning-for-Robotics/",
            "title": "Computational Motion Planning for Robotics",
            "date_published": "2023-07-20T07:11:11.000Z",
            "content_html": "<h1 id=\"第一周\"><a class=\"markdownIt-Anchor\" href=\"#第一周\">#</a> 第一周</h1>\n<p>​\t\t路径规划的目的为让机器人从设定的起始点（Start note）以基于用户要求的条件移动到终点（End note）</p>\n<h2 id=\"以图为基础的路径规划算法\"><a class=\"markdownIt-Anchor\" href=\"#以图为基础的路径规划算法\">#</a> 以图为基础的路径规划算法</h2>\n<h4 id=\"grassfire-algorithm\"><a class=\"markdownIt-Anchor\" href=\"#grassfire-algorithm\">#</a> Grassfire Algorithm</h4>\n<ol>\n<li>算法思想</li>\n</ol>\n<p>火线算法（Grassfire Algorithm）为广度优先搜索算法的一种特例，如同其名 —— 野火燎原，它中将起始点类比为薪火，假设设定机器人的初始位置（起始点）设置为 0，并且从起始点开始每经过一个相邻点，就将其设为前一点的数值加 1，那么当机器人达到终点位置时，终点的显示数值就相当于机器人从起始点到终点所需花费的资源计量，这个资源可能是时间或是算力，而它的计量可以用于辅助评价路径优劣。</p>\n<p><img src=\"CMP/Grassfire-notes.png\" alt=\"Grassfire算法示例\" title=\"图1 Grassfire算法示例\"></p>\n<ol start=\"2\">\n<li>\n<p>优缺点</p>\n<ul>\n<li>\n<p>优点</p>\n<ol>\n<li>以距离为例，火线算法可以找到从起点到终点的最短路径，例如图 1 中的最短路径即为 10，也就是可以保证找到的路径是距离最短的</li>\n<li>当起始点和终点之间并不存在可经路径时，算法可以反馈给用户</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>\n<p>此算法的<a href=\"/2023/07/21/Computationnal-complexity/\" title=\"Computationnal complexity\">计算复杂度</a>会线性跟随点的数量（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\vert V \\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span></span></span></span>），如公式（1）所示，所以若使用此算法时遇到变量数多或维度较高的案例将会十分耗费内存，因此并不建议使用。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">O(\\vert V \\vert)\\tag{1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">1</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n</li>\n<li>\n<p>以图 1 为例，一个点会与一个以上的其他点相邻，到达该点的路径并不唯一，所以此算法所寻找的最优路径也不唯一</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>伪代码解释</p>\n<p>结合上文，以上述图 1 为例，伪代码中以循环列表结构来存储距离数值。开始先初始化 n 个节点，并将所有点的距离数值都设定为无穷，再建立一个空循环列表来存放机器人行经路径的距离数值，并让代表起点到终点距离的变量设置为 0 放入列表中，当列表不为空，也就是终点（goal）存在时开启循环，机器人会先行经列表中的第一个节点，也就是终点，那么与终点相邻的点 n，若是点 n 的距离为无穷，则把相邻点的距离值设置为机器人当前行经点的值加 1，并将此相邻点加入列表表尾，而若是距离为具体数值则停止循环，即当前节点不再有新的相邻点</p>\n</li>\n</ol>\n<p>![Grassfire 伪代码](CMP/Grassfire-pseudo code.png “图 2 Grassfire 伪代码”)</p>\n<h3 id=\"dijkstras-algorithm\"><a class=\"markdownIt-Anchor\" href=\"#dijkstras-algorithm\">#</a> Dijkstra’s Algorithm</h3>\n<ol>\n<li>算法思想</li>\n</ol>\n<p>无向图是由节点和边所组成，上述火线算法的例子中，所有路径的权值都是相同的，但真实场景中往往每一个边所占的权重相异，就像是两个村庄之间的距离大多不一样，那如果像图三这样的加权无向图想要找到从 A 点到 E 点的最短路径，就可以使用迪杰斯特拉算法（Dijkstra’s Algorithm）。在这个算法中，每一次机器人运动方向都是前往距离它当前所在节点路径最短且被允许前往的节点，由于每前行动都走最短的路径，因此它可以看作是贪婪算法（Greedy Alogorithm）在图上的一种应用方式。</p>\n<p><img src=\"CMP/Dijstra%27s-example.png\" alt=\"Dijstra's example\" title=\"图三 迪杰斯特拉算法举例\"></p>\n<ol start=\"2\">\n<li>\n<p>优缺点</p>\n<ul>\n<li>\n<p>优点</p>\n<ol>\n<li>迪杰斯特拉算法思想十分直观，容易理解</li>\n<li>算法保证找出的路径必然为最短路径</li>\n</ol>\n</li>\n<li>\n<p>缺点</p>\n<ol>\n<li>\n<p>迪杰斯特拉算法的<a href=\"/2023/07/21/Computationnal-complexity/\" title=\"Computationnal complexity\">计算复杂度</a>要高于火线算法，经典的迪杰斯特拉算法等价于每次搜索图中满足条件的点时都要遍历整个图，所以计算复杂度会跟随节点个数的二次方增长，且实际上在遍历节点的同时也需要遍历所有的边，如公式（2）所示，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>v</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\vert v\\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∣</span></span></span></span> 为节点个数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\vert E\\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span></span></span></span> 为边个数。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>V</mi><msup><mi mathvariant=\"normal\">∣</mi><mn>2</mn></msup><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">O(\\vert V\\vert ^2+\\vert E \\vert) \\tag{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">2</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n<p>为了方便理解迪杰斯特拉算法的计算复杂度，可参考来源于维基百科的图四<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>，图中直观表现出算法复杂度与节点个数呈现二次方关系的原由。</p>\n<p><img src=\"CMP/DijkstraDemo.gif\" alt=\"DijkstraDemo\" title=\"图四 Dijkstra算法的最短路径寻找过程\"></p>\n<p>而若使用优先级列队结构进行存储，则可以降低计算复杂度的增长速度，在节点数量上变为对数增长，其具体关系如公式（3）所示，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\vert E \\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\vert V\\vert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span></span></span></span> 分别为路径个数和节点个数。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable width=\"100%\"><mtr><mtd width=\"50%\"></mtd><mtd><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo>+</mo><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>V</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mtd><mtd width=\"50%\"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">O((\\vert E\\vert+\\vert V\\vert)\\log(\\vert V\\vert))\\tag{3}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span><span class=\"tag\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">(</span><span class=\"mord\"><span class=\"mord\">3</span></span><span class=\"mord\">)</span></span></span></span></span></span></p>\n</li>\n<li>\n<p>此算法只能用于权重非负的图上，因为只有这样才能确保算法找出的路是最短路径</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"a-algorithm\"><a class=\"markdownIt-Anchor\" href=\"#a-algorithm\">#</a> A* Algorithm</h3>\n<ol>\n<li>算法思想</li>\n</ol>\n<p>迪杰斯特拉算法和火线算法在执行时都会遍历几乎所有的节点，这使得它们所需要的计算资源负担会随着节点数增多而快速增加，那么若有一种情况是终点和起点的节点都已经被确定，等同于终点相对起点的方向已经知晓，在这种情况下，可以先假设最短路径出现在靠近起点到终点方向直线附近的概率较高，因此算法可以优先评估这个方向上的节点，这就是 A * 算法（A *  Algorithm）的基础想法，这种假设并没有根据，只是人为依照经验所推断的结果，因为最短路径也完全有可能出现在其他方向上。</p>\n<ol start=\"2\">\n<li>\n<p>启发式搜索算法</p>\n<p>A * 算法是启发式搜索算法（Heuristic Algorithm）的一种 —— 最佳优先搜索（Best First Search）的特例，因为</p>\n</li>\n</ol>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>[Deomo for Dijkstra’s algorithm](<a href=\"https://en.wikipedia.org/wiki/Dijkstra's_algorithm\">Dijkstra’s algorithm - Wikipedia</a>) <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "Robotics; Motion Planning; coursera"
            ]
        }
    ]
}